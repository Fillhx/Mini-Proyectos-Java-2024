package controlador;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Iterator;
import java.util.List;
import javax.swing.UIManager;
import militar.Batallon;
import militar.Soldado;
import view.VentanaPrincipal;
import vistaconsola.VistaConsola;

public class Controlador implements ActionListener {
   private Batallon batallon = new Batallon();
   private VentanaPrincipal ventanaPrincipal = new VentanaPrincipal(this);
   private VistaConsola vistaConsola = new VistaConsola();

   public Controlador() {
      this.ejecutarVistaConsola();
   }

   private void ejecutarVistaConsola() {
      int opcion = false;

      int opcion;
      do {
         opcion = this.vistaConsola.mostrarMenuPrincipal();
         switch (opcion) {
            case 1:
               String nombreSoldado = this.vistaConsola.obtenerValorString("Ingrese el nombre del soldado:");
               String rangoSoldado = this.vistaConsola.obtenerRangoSoldado();
               String idSoldado = this.vistaConsola.obtenerIdSoldado(this.batallon.getDatosdesoldados());
               this.batallon.agregarSoldado(new Soldado(nombreSoldado, rangoSoldado, idSoldado));
               this.vistaConsola.mostrarMensaje("Soldado agregado correctamente");
               this.ventanaPrincipal.updatelistaSoldados(this.batallon.getDatosdesoldados());
               break;
            case 2:
               int numeroSoldado = this.vistaConsola.seleccionarSoldado(this.batallon.getDatosdesoldados(), "Seleccione un soldado a asignar su misi\u00f3n");
               if (numeroSoldado != -1) {
                  Soldado soldadoSeleccionado = (Soldado)this.batallon.getDatosdesoldados().get(numeroSoldado);
                  String misionSoldado = this.vistaConsola.obtenerMision(soldadoSeleccionado.getRango());
                  this.batallon.asignarMision(soldadoSeleccionado.getId(), misionSoldado);
                  if (!misionSoldado.equals("Desobedeci\u00f3 la misi\u00f3n.")) {
                     this.vistaConsola.mostrarMensaje("\u00a1Misi\u00f3n aceptada! " + soldadoSeleccionado.getNombre() + " est\u00e1 listo para cumplirla.");
                  }
               }
               break;
            case 3:
               this.vistaConsola.mostrarMensaje("Informaci\u00f3n de los soldados agregados:");
               this.vistaConsola.mostrarSoldados(this.batallon.getDatosdesoldados());
               break;
            case 4:
               int numeroSoldadoARegañar = this.vistaConsola.seleccionarSoldado(this.batallon.getDatosdesoldados(), "Seleccione un soldado a rega\u00f1ar");
               if (numeroSoldadoARegañar != -1) {
                  Soldado soldadoARegañar = this.vistaConsola.reganiarSoldado((Soldado)this.batallon.getDatosdesoldados().get(numeroSoldadoARegañar));
                  if (!soldadoARegañar.getId().equals("-1")) {
                     this.batallon.getDatosdesoldados().remove(soldadoARegañar);
                  }

                  this.ventanaPrincipal.updatelistaSoldados(this.batallon.getDatosdesoldados());
               }
               break;
            case 5:
               int numeroSoldadoASaludar = this.vistaConsola.seleccionarSoldado(this.batallon.getDatosdesoldados(), "Seleccione un soldado a saludar");
               if (numeroSoldadoASaludar != -1) {
                  this.vistaConsola.saludarSoldado(((Soldado)this.batallon.getDatosdesoldados().get(numeroSoldadoASaludar)).getNombre());
               }
               break;
            case 6:
               int numeroSoldadoPatrullar = this.vistaConsola.seleccionarSoldado(this.batallon.getDatosdesoldados(), "Seleccione un soldado que vaya a patrullar");
               if (numeroSoldadoPatrullar != -1) {
                  ((Soldado)this.batallon.getDatosdesoldados().get(numeroSoldadoPatrullar)).setMision(this.vistaConsola.ponerPatrullarSoldado());
                  this.vistaConsola.mostrarMensaje("La patrulla ha sido asignada correctamente.");
               }
               break;
            case 7:
               this.batallon.getDatosdesoldados().clear();
               this.ventanaPrincipal.updatelistaSoldados(this.batallon.getDatosdesoldados());
               this.vistaConsola.mostrarMensaje("Conjunto de soldados reiniciado satisfactoriamente");
               break;
            case 8:
               this.vistaConsola.mostrarMensaje("Ha salido del programa exitosamente.");
         }
      } while(opcion != 8);

      this.ventanaPrincipal.dispose();
   }

   public void actionPerformed(ActionEvent e) {
      List selectedSoldiers;
      Soldado soldado;
      switch (e.getActionCommand()) {
         case "AgregarSoldado":
            this.ventanaPrincipal.crearUsuarioPanel(this.batallon.getDatosdesoldados());
            break;
         case "MostrarInformacion":
            this.ventanaPrincipal.updateTextArea(this.batallon.getDatosdesoldados());
            break;
         case "Saludar":
            this.performAction("saludar");
            break;
         case "Rega\u00f1ar":
            selectedSoldiers = this.ventanaPrincipal.obtenerListaSoldadosSeleccionados();
            this.ventanaPrincipal.regañarSoldados(selectedSoldiers, this.batallon.getDatosdesoldados());
            break;
         case "Patrullar":
            selectedSoldiers = this.ventanaPrincipal.obtenerListaSoldadosSeleccionados();
            if (selectedSoldiers.isEmpty()) {
               this.ventanaPrincipal.mostrarMensajeJOptionPaneAdvertencia("Por favor, selecciona al menos un soldado.");
               break;
            } else {
               List<Soldado> datosdesoldados = this.batallon.getDatosdesoldados();
               Iterator var11 = selectedSoldiers.iterator();

               while(true) {
                  while(var11.hasNext()) {
                     String soldierName = (String)var11.next();
                     Iterator var14 = datosdesoldados.iterator();

                     while(var14.hasNext()) {
                        soldado = (Soldado)var14.next();
                        if (soldado.getNombre().equals(soldierName)) {
                           this.ventanaPrincipal.ponerPatrullarSoldado(soldado.getId(), soldado.getNombre());
                           break;
                        }
                     }
                  }

                  return;
               }
            }
         case "AsignarMision":
            List<String> soldadosSeleccionados = this.ventanaPrincipal.obtenerListaSoldadosSeleccionados();
            if (soldadosSeleccionados.isEmpty()) {
               this.ventanaPrincipal.mostrarMensajeJOptionPaneAdvertencia("Por favor, selecciona al menos un soldado.");
               break;
            } else {
               Iterator var12 = soldadosSeleccionados.iterator();

               while(var12.hasNext()) {
                  String nombreSoldado = (String)var12.next();
                  soldado = this.batallon.buscarSoldadoPorNombre(nombreSoldado);
                  this.batallon.asignarMision(soldado.getId(), this.ventanaPrincipal.asignarMision(soldado.getNombre(), soldado.getRango()));
               }

               return;
            }
         case "ObtenerMision":
            Soldado soldadoColocarMision = this.batallon.buscarSoldadoPorID(this.ventanaPrincipal.obtenerIDSoldadoActualPatrullar());
            if (!soldadoColocarMision.getId().equals("-1")) {
               soldadoColocarMision.setMision(this.ventanaPrincipal.obtenerMision());
            }
            break;
         case "Reiniciar":
            this.batallon.getDatosdesoldados().clear();
            this.ventanaPrincipal.updatelistaSoldados(this.batallon.getDatosdesoldados());
      }

   }

   public void performAction(String action) {
      List<String> selectedSoldiers = this.ventanaPrincipal.obtenerListaSoldadosSeleccionados();
      if (selectedSoldiers.isEmpty()) {
         this.ventanaPrincipal.mostrarMensajeJOptionPaneAdvertencia("Por favor, selecciona al menos un soldado.");
      } else {
         this.ventanaPrincipal.limpiarDatosAreaInformacion("");
         if (action.equals("saludar")) {
            String result = VentanaPrincipal.saludarSoldados(selectedSoldiers);
            this.ventanaPrincipal.ponerDatosAreaInformacion(result);
         } else {
            Iterator var7 = selectedSoldiers.iterator();

            while(var7.hasNext()) {
               String soldado = (String)var7.next();
               switch (action) {
                  case "rega\u00f1ar":
                     this.ventanaPrincipal.ponerDatosAreaInformacionReganiarSoldado(soldado);
                     break;
                  case "patrullar":
                     this.ventanaPrincipal.ponerDatosAreaInformacionPatrullarSoldado(soldado);
               }
            }
         }
      }

   }

   public static void main(String[] args) {
      try {
         UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
      } catch (Exception var2) {
         var2.printStackTrace();
      }

      new Controlador();
   }
}